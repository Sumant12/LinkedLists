//
//  DoubleLinkedList.cpp
//  DoubleLinkedListImpl
//
//  Created by Sumanth Sai on 9/30/16.
//  Copyright © 2016 Sumanth Sai. All rights reserved.
//

#include <iostream>
#include "DoubleLinkedList.h"
using namespace std;



//This Method appends an item which is given as an argument to this function to the Double Lnkedlist
void DoubleLinkedList::append(Node* *headref,int item){
    
    Node* node_ins = new Node();
    Node* last = *headref;
    
    node_ins->data = item;
    
    node_ins->next_link = NULL;
    
    if(*headref == NULL){
        node_ins->prev_link = NULL;
        *headref = node_ins;
        start = * headref;
        return;
        
    }
    while(last->next_link != NULL){
        last = last->next_link;
        
    }
    last->next_link = node_ins;
    node_ins->prev_link = last;
    return;
    
}


//This Method prints the list
void DoubleLinkedList::printlist(Node* node){
    
    int counter =0;
    while(node != NULL){
        if(counter%4 ==0){
            cout<<endl;
        }
        counter++;
        cout<<node->data<<" ";
        node = node->next_link;
    }
    cout<<endl;
    
}


//This Method reverses the list
void DoubleLinkedList::reverse(Node** headref){
    Node* tmp = NULL;
    Node* current = *headref;
    while(current != NULL){
        tmp = current->prev_link;
        current->prev_link = current->next_link;
        current->next_link = tmp;
        current = current->prev_link;
    }
    if(tmp != NULL){
        *headref = tmp->prev_link;
    }
    
}


//This Method shuffles two the elemenst of two lists
void DoubleLinkedList::shuffle(Node* a){
    Node* p = a;
    Node* q= NULL;
    q = split(p);
    cout<<endl;
    cout<<"** first half **"<<endl;
    cout<<endl;
    printlist(p);
    cout<<endl;
    cout<<"** Second half **"<<endl;
    cout<<endl;
    printlist(q);
    Node* p_c = p, *q_c = q;
    Node* p_n, *q_n;
    
    while(p_c != NULL && q_c != NULL){
        
        p_n = p_c->next_link;
        q_n = q_c->next_link    ;
        
        q_c->next_link = p_n;
        p_c->next_link = q_c;
        
        p_c = p_n;
        q_c = q_n;
    }
}


//This Method splits a list into two halves
Node* DoubleLinkedList::split(Node* head){
    
    Node* fast = head;
    Node* slow = head;
    while(fast->next_link && fast->next_link->next_link){
        fast = fast->next_link->next_link;
        slow = slow->next_link;
    }
    Node* tmp = slow->next_link;
    slow->next_link = NULL;
    return tmp;
}


//This method merges two Double linked lists into one after sorting
Node* DoubleLinkedList::mergeaftersort(Node* first,Node* second){
    if(!first){
        return second;
    }
    if(!second){
        return first;
    }
    
    if(first->data<second->data){
        first->next_link = mergeaftersort(first->next_link, second);
        first->next_link->prev_link = first;
        first->prev_link = NULL;
        return first;
    }
    else{
        second->next_link = mergeaftersort(first, second->next_link);
        second->next_link->prev_link = second;
        second->prev_link = NULL;
        return second;
    }
}

//This Method sorts the list
Node* DoubleLinkedList::sort(Node* head){
    if(!head || !head->next_link){
        return head;
    }
    Node* second = split(head);
    head = sort(head);
    second = sort(second);
    
    return mergeaftersort(head, second);
}


//This Method merges two lists
void DoubleLinkedList::merge(Node* a,Node* b){
    if(a==NULL || b==NULL){
        return;
    }
    while(a->next_link != NULL) {
        a= a->next_link;
    }
    a->next_link =b;
    b->prev_link = a;
}

//This Method executes the first problem statement(Team of four)
void DoubleLinkedList::teamoffoursort(Node* head){
    Node* fast;
    Node* slow;
    Node* slow2;
    int count=0;
    if(head == NULL){
        return;
    }
    
    slow = head;
    fast = head->next_link;
    if(fast == NULL){
        merge(spm,slow);
        return;
    }
    
    
    while(fast->next_link !=NULL && count <2){
        count +=1;
        fast=fast->next_link;
        
        if(fast->next_link != NULL){
            count +=1;
            fast= fast->next_link;
        }
    }
    
    if(fast != NULL){
        slow2 = fast->next_link;
    }
    if(fast != NULL){
        fast->next_link = NULL;
    }
    slow = sort(slow);
    
    if((spm == NULL) || (spm->next_link == NULL)){
        spm = slow;
        start = slow;
    }
    else{
        merge(spm, slow);
    }
    
    
    slow = slow2;
    teamoffoursort(slow);
}
//
//  DoubleLinkedList.h
//  DoubleLinkedListImpl
//
//  Created by Sumanth Sai on 9/30/16.
//  Copyright © 2016 Sumanth Sai. All rights reserved.
//

#ifndef DoubleLinkedList_h
#define DoubleLinkedList_h
using namespace std;
class Node{
    
public:
    int data;
    Node* prev_link;
    Node* next_link;
public:
    Node(){
        data =0;
        prev_link = NULL;
        next_link = NULL;
    }
};

class DoubleLinkedList{
public:
    Node* start = NULL;
    Node* spm = NULL;
    void append(Node* *headref,int item);
    void printlist(Node* node);
    void reverse(Node** head_ref);
    Node* List(Node* head);
    void teamoffoursort(Node* head);
    void shuffle(Node* p);
    void merge(Node* a,Node* b);
    Node* sort(Node* head);
    Node* mergeaftersort(Node* first,Node* second);
    Node* split(Node* head);
};

#endif /* DoubleLinkedList_h */
---------------------------------

Execution of S1 for Single Linked list:

---------------------------------

---------------------------------

**** Before Team Of Four Operation  ****


1 2 3 4 
5 6 7 8 
9 10 11 12 
13 14 15 16 
17 18 19 20 
21 22 23 24 
25 26 27 28 
29 30 31 32 
33 34 35 36 
37 38 39 40 
41 42 43 44 
45 46 47 48 
49 50 51 52 
53 54 55 56 
57 58 59 60 
61 62 63 64 
65 66 67 68 
69 70 71 72 
73 74 75 76 
77 78 79 80 
81 82 83 84 
85 86 87 88 
89 90 91 92 
93 94 95 96 
97 98 99 100 

**** After Team Of Four Operation ****


1 2 3 4 
5 6 7 8 
9 10 11 12 
13 14 15 16 
17 18 19 20 
21 22 23 24 
25 26 27 28 
29 30 31 32 
33 34 35 36 
37 38 39 40 
41 42 43 44 
45 46 47 48 
49 50 51 52 
53 54 55 56 
57 58 59 60 
61 62 63 64 
65 66 67 68 
69 70 71 72 
73 74 75 76 
77 78 79 80 
81 82 83 84 
85 86 87 88 
89 90 91 92 
93 94 95 96 
97 98 99 100 

---------------------------------

---------------------------------

**** Before Reverse Operation  ****


1 2 3 4 
5 6 7 8 
9 10 11 12 
13 14 15 16 
17 18 19 20 
21 22 23 24 
25 26 27 28 
29 30 31 32 
33 34 35 36 
37 38 39 40 
41 42 43 44 
45 46 47 48 
49 50 51 52 
53 54 55 56 
57 58 59 60 
61 62 63 64 
65 66 67 68 
69 70 71 72 
73 74 75 76 
77 78 79 80 
81 82 83 84 
85 86 87 88 
89 90 91 92 
93 94 95 96 
97 98 99 100 

**** After Reverse Operation  ****s


100 99 98 97 
96 95 94 93 
92 91 90 89 
88 87 86 85 
84 83 82 81 
80 79 78 77 
76 75 74 73 
72 71 70 69 
68 67 66 65 
64 63 62 61 
60 59 58 57 
56 55 54 53 
52 51 50 49 
48 47 46 45 
44 43 42 41 
40 39 38 37 
36 35 34 33 
32 31 30 29 
28 27 26 25 
24 23 22 21 
20 19 18 17 
16 15 14 13 
12 11 10 9 
8 7 6 5 
4 3 2 1 

---------------------------------

---------------------------------

**** Before shuffling opearion ****

** first half **

1 2 3 4 
5 6 7 8 
9 10 11 12 
13 14 15 16 
17 18 19 20 
21 22 23 24 
25 26 27 28 
29 30 31 32 
33 34 35 36 
37 38 39 40 
41 42 43 44 
45 46 47 48 
49 50 

** second half **

51 52 53 54 
55 56 57 58 
59 60 61 62 
63 64 65 66 
67 68 69 70 
71 72 73 74 
75 76 77 78 
79 80 81 82 
83 84 85 86 
87 88 89 90 
91 92 93 94 
95 96 97 98 
99 100 

**** After shuffling opearion ****

1 51 2 52 
3 53 4 54 
5 55 6 56 
7 57 8 58 
9 59 10 60 
11 61 12 62 
13 63 14 64 
15 65 16 66 
17 67 18 68 
19 69 20 70 
21 71 22 72 
23 73 24 74 
25 75 26 76 
27 77 28 78 
29 79 30 80 
31 81 32 82 
33 83 34 84 
35 85 36 86 
37 87 38 88 
39 89 40 90 
41 91 42 92 
43 93 44 94 
45 95 46 96 
47 97 48 98 
49 99 50 100 

---------------------------------

-----------------------------------------------------

---------------------------------

Execution of S2 for Single Linked list:

---------------------------------

---------------------------------

**** Before Team Of Four Operation  ****


16807 282475249 1622650073 984943658 
1144108930 470211272 101027544 1457850878 
1458777923 2007237709 823564440 1115438165 
1784484492 74243042 114807987 1137522503 
1441282327 16531729 823378840 143542612 
896544303 1474833169 1264817709 1998097157 
1817129560 1131570933 197493099 1404280278 
893351816 1505795335 1954899097 1636807826 
563613512 101929267 1580723810 704877633 
1358580979 1624379149 2128236579 784558821 
530511967 2110010672 1551901393 1617819336 
1399125485 156091745 1356425228 1899894091 
585640194 937186357 1646035001 1025921153 
510616708 590357944 771515668 357571490 
1044788124 1927702196 1952509530 130060903 
1942727722 1083454666 1108728549 685118024 
2118797801 1060806853 571540977 194847408 
2035308228 158374933 1075260298 824938981 
595028635 1962408013 1137623865 997389814 
2020739063 107554536 1635339425 1654001669 
1777724115 269220094 34075629 1478446501 
1864546517 1351934195 1581030105 1557810404 
2146319451 1908194298 500782188 657821123 
753799505 1102246882 1269406752 1816731566 
884936716 1807130337 578354438 892053144 

**** After Team Of Four Operation ****


16807 282475249 984943658 1622650073 
101027544 470211272 1144108930 1457850878 
823564440 1115438165 1458777923 2007237709 
74243042 114807987 1137522503 1784484492 
16531729 143542612 823378840 1441282327 
896544303 1264817709 1474833169 1998097157 
197493099 1131570933 1404280278 1817129560 
893351816 1505795335 1636807826 1954899097 
101929267 563613512 704877633 1580723810 
784558821 1358580979 1624379149 2128236579 
530511967 1551901393 1617819336 2110010672 
156091745 1356425228 1399125485 1899894091 
585640194 937186357 1025921153 1646035001 
357571490 510616708 590357944 771515668 
130060903 1044788124 1927702196 1952509530 
685118024 1083454666 1108728549 1942727722 
194847408 571540977 1060806853 2118797801 
158374933 824938981 1075260298 2035308228 
595028635 997389814 1137623865 1962408013 
107554536 1635339425 1654001669 2020739063 
34075629 269220094 1478446501 1777724115 
1351934195 1557810404 1581030105 1864546517 
500782188 657821123 1908194298 2146319451 
753799505 1102246882 1269406752 1816731566 
578354438 884936716 892053144 1807130337 

---------------------------------

---------------------------------

**** Before Reverse Operation  ****


16807 282475249 984943658 1622650073 
101027544 470211272 1144108930 1457850878 
823564440 1115438165 1458777923 2007237709 
74243042 114807987 1137522503 1784484492 
16531729 143542612 823378840 1441282327 
896544303 1264817709 1474833169 1998097157 
197493099 1131570933 1404280278 1817129560 
893351816 1505795335 1636807826 1954899097 
101929267 563613512 704877633 1580723810 
784558821 1358580979 1624379149 2128236579 
530511967 1551901393 1617819336 2110010672 
156091745 1356425228 1399125485 1899894091 
585640194 937186357 1025921153 1646035001 
357571490 510616708 590357944 771515668 
130060903 1044788124 1927702196 1952509530 
685118024 1083454666 1108728549 1942727722 
194847408 571540977 1060806853 2118797801 
158374933 824938981 1075260298 2035308228 
595028635 997389814 1137623865 1962408013 
107554536 1635339425 1654001669 2020739063 
34075629 269220094 1478446501 1777724115 
1351934195 1557810404 1581030105 1864546517 
500782188 657821123 1908194298 2146319451 
753799505 1102246882 1269406752 1816731566 
578354438 884936716 892053144 1807130337 

**** After Reverse Operation  ****s


1807130337 892053144 884936716 578354438 
1816731566 1269406752 1102246882 753799505 
2146319451 1908194298 657821123 500782188 
1864546517 1581030105 1557810404 1351934195 
1777724115 1478446501 269220094 34075629 
2020739063 1654001669 1635339425 107554536 
1962408013 1137623865 997389814 595028635 
2035308228 1075260298 824938981 158374933 
2118797801 1060806853 571540977 194847408 
1942727722 1108728549 1083454666 685118024 
1952509530 1927702196 1044788124 130060903 
771515668 590357944 510616708 357571490 
1646035001 1025921153 937186357 585640194 
1899894091 1399125485 1356425228 156091745 
2110010672 1617819336 1551901393 530511967 
2128236579 1624379149 1358580979 784558821 
1580723810 704877633 563613512 101929267 
1954899097 1636807826 1505795335 893351816 
1817129560 1404280278 1131570933 197493099 
1998097157 1474833169 1264817709 896544303 
1441282327 823378840 143542612 16531729 
1784484492 1137522503 114807987 74243042 
2007237709 1458777923 1115438165 823564440 
1457850878 1144108930 470211272 101027544 
1622650073 984943658 282475249 16807 

---------------------------------

---------------------------------

**** Before shuffling opearion ****

** first half **

1807130337 892053144 884936716 578354438 
1816731566 1269406752 1102246882 753799505 
2146319451 1908194298 657821123 500782188 
1864546517 1581030105 1557810404 1351934195 
1777724115 1478446501 269220094 34075629 
2020739063 1654001669 1635339425 107554536 
1962408013 1137623865 997389814 595028635 
2035308228 1075260298 824938981 158374933 
2118797801 1060806853 571540977 194847408 
1942727722 1108728549 1083454666 685118024 
1952509530 1927702196 1044788124 130060903 
771515668 590357944 510616708 357571490 
1646035001 1025921153 

** second half **

937186357 585640194 1899894091 1399125485 
1356425228 156091745 2110010672 1617819336 
1551901393 530511967 2128236579 1624379149 
1358580979 784558821 1580723810 704877633 
563613512 101929267 1954899097 1636807826 
1505795335 893351816 1817129560 1404280278 
1131570933 197493099 1998097157 1474833169 
1264817709 896544303 1441282327 823378840 
143542612 16531729 1784484492 1137522503 
114807987 74243042 2007237709 1458777923 
1115438165 823564440 1457850878 1144108930 
470211272 101027544 1622650073 984943658 
282475249 16807 

**** After shuffling opearion ****

1807130337 937186357 892053144 585640194 
884936716 1899894091 578354438 1399125485 
1816731566 1356425228 1269406752 156091745 
1102246882 2110010672 753799505 1617819336 
2146319451 1551901393 1908194298 530511967 
657821123 2128236579 500782188 1624379149 
1864546517 1358580979 1581030105 784558821 
1557810404 1580723810 1351934195 704877633 
1777724115 563613512 1478446501 101929267 
269220094 1954899097 34075629 1636807826 
2020739063 1505795335 1654001669 893351816 
1635339425 1817129560 107554536 1404280278 
1962408013 1131570933 1137623865 197493099 
997389814 1998097157 595028635 1474833169 
2035308228 1264817709 1075260298 896544303 
824938981 1441282327 158374933 823378840 
2118797801 143542612 1060806853 16531729 
571540977 1784484492 194847408 1137522503 
1942727722 114807987 1108728549 74243042 
1083454666 2007237709 685118024 1458777923 
1952509530 1115438165 1927702196 823564440 
1044788124 1457850878 130060903 1144108930 
771515668 470211272 590357944 101027544 
510616708 1622650073 357571490 984943658 
1646035001 282475249 1025921153 16807 

---------------------------------
---------------------------------

Execution of S1 for Double Linked list:

---------------------------------

---------------------------------

**** Before Team Of Four Operation  ****


1 2 3 4 
5 6 7 8 
9 10 11 12 
13 14 15 16 
17 18 19 20 
21 22 23 24 
25 26 27 28 
29 30 31 32 
33 34 35 36 
37 38 39 40 
41 42 43 44 
45 46 47 48 
49 50 51 52 
53 54 55 56 
57 58 59 60 
61 62 63 64 
65 66 67 68 
69 70 71 72 
73 74 75 76 
77 78 79 80 
81 82 83 84 
85 86 87 88 
89 90 91 92 
93 94 95 96 
97 98 99 100 

**** After Team Of Four Operation ****


1 2 3 4 
5 6 7 8 
9 10 11 12 
13 14 15 16 
17 18 19 20 
21 22 23 24 
25 26 27 28 
29 30 31 32 
33 34 35 36 
37 38 39 40 
41 42 43 44 
45 46 47 48 
49 50 51 52 
53 54 55 56 
57 58 59 60 
61 62 63 64 
65 66 67 68 
69 70 71 72 
73 74 75 76 
77 78 79 80 
81 82 83 84 
85 86 87 88 
89 90 91 92 
93 94 95 96 
97 98 99 100 

---------------------------------

---------------------------------

**** Before Reverse Operation  ****


1 2 3 4 
5 6 7 8 
9 10 11 12 
13 14 15 16 
17 18 19 20 
21 22 23 24 
25 26 27 28 
29 30 31 32 
33 34 35 36 
37 38 39 40 
41 42 43 44 
45 46 47 48 
49 50 51 52 
53 54 55 56 
57 58 59 60 
61 62 63 64 
65 66 67 68 
69 70 71 72 
73 74 75 76 
77 78 79 80 
81 82 83 84 
85 86 87 88 
89 90 91 92 
93 94 95 96 
97 98 99 100 

**** After Reverse Operation  ****


100 99 98 97 
96 95 94 93 
92 91 90 89 
88 87 86 85 
84 83 82 81 
80 79 78 77 
76 75 74 73 
72 71 70 69 
68 67 66 65 
64 63 62 61 
60 59 58 57 
56 55 54 53 
52 51 50 49 
48 47 46 45 
44 43 42 41 
40 39 38 37 
36 35 34 33 
32 31 30 29 
28 27 26 25 
24 23 22 21 
20 19 18 17 
16 15 14 13 
12 11 10 9 
8 7 6 5 
4 3 2 1 

---------------------------------

---------------------------------

**** Before shuffling opearion ****

** first half **


1 2 3 4 
5 6 7 8 
9 10 11 12 
13 14 15 16 
17 18 19 20 
21 22 23 24 
25 26 27 28 
29 30 31 32 
33 34 35 36 
37 38 39 40 
41 42 43 44 
45 46 47 48 
49 50 

** Second half **


51 52 53 54 
55 56 57 58 
59 60 61 62 
63 64 65 66 
67 68 69 70 
71 72 73 74 
75 76 77 78 
79 80 81 82 
83 84 85 86 
87 88 89 90 
91 92 93 94 
95 96 97 98 
99 100 

**** After shuffling opearion ****

1 51 2 52 
3 53 4 54 
5 55 6 56 
7 57 8 58 
9 59 10 60 
11 61 12 62 
13 63 14 64 
15 65 16 66 
17 67 18 68 
19 69 20 70 
21 71 22 72 
23 73 24 74 
25 75 26 76 
27 77 28 78 
29 79 30 80 
31 81 32 82 
33 83 34 84 
35 85 36 86 
37 87 38 88 
39 89 40 90 
41 91 42 92 
43 93 44 94 
45 95 46 96 
47 97 48 98 
49 99 50 100 

---------------------------------

-----------------------------------------------------

---------------------------------

Execution of S2 for Double Linked list:

---------------------------------

---------------------------------

**** Before Team Of Four Operation  ****


1153851501 1004844897 616783871 382955828 
330111137 1227619358 1723153177 70982397 
1147722294 1070477904 2051621609 1606946231 
1190959745 1912844175 1341853635 1808266298 
343098142 456880399 1534827968 280090412 
195400260 589673557 6441594 889688008 
57716395 1524325968 2014119113 515204530 
388471006 681910962 1904797942 1400285365 
322842082 1463179852 828530767 832633821 
1073185695 316824712 1260973671 1815859901 
1267248590 2051724831 1194314738 318153057 
2111631616 877819790 304555640 1213110679 
541437335 1049077006 996497972 2063936098 
270649095 428975319 685583454 1351345223 
272112289 1398556760 1334948905 1724586126 
532236123 1023129506 836045813 436476770 
60935238 1936329094 915896220 304987844 
2034712366 881140534 281725226 1901915394 
197941363 348318738 152607844 784559590 
543436550 290145159 1681808623 977764947 
750597385 971307217 1737195272 2000755539 
1399399247 462242385 1459413496 1951894885 
537140623 1848682420 1012028144 1086531968 
1289335735 1755699915 1623161625 992663534 
2043046042 1358796011 943454679 1771024152 

**** After Team Of Four Operation ****


382955828 616783871 1004844897 1153851501 
70982397 330111137 1227619358 1723153177 
1070477904 1147722294 1606946231 2051621609 
1190959745 1341853635 1808266298 1912844175 
280090412 343098142 456880399 1534827968 
6441594 195400260 589673557 889688008 
57716395 515204530 1524325968 2014119113 
388471006 681910962 1400285365 1904797942 
322842082 828530767 832633821 1463179852 
316824712 1073185695 1260973671 1815859901 
318153057 1194314738 1267248590 2051724831 
304555640 877819790 1213110679 2111631616 
541437335 996497972 1049077006 2063936098 
270649095 428975319 685583454 1351345223 
272112289 1334948905 1398556760 1724586126 
436476770 532236123 836045813 1023129506 
60935238 304987844 915896220 1936329094 
281725226 881140534 1901915394 2034712366 
152607844 197941363 348318738 784559590 
290145159 543436550 977764947 1681808623 
750597385 971307217 1737195272 2000755539 
462242385 1399399247 1459413496 1951894885 
537140623 1012028144 1086531968 1848682420 
992663534 1289335735 1623161625 1755699915 
943454679 1358796011 1771024152 2043046042 

---------------------------------

---------------------------------

**** Before Reverse Operation  **** 


382955828 616783871 1004844897 1153851501 
70982397 330111137 1227619358 1723153177 
1070477904 1147722294 1606946231 2051621609 
1190959745 1341853635 1808266298 1912844175 
280090412 343098142 456880399 1534827968 
6441594 195400260 589673557 889688008 
57716395 515204530 1524325968 2014119113 
388471006 681910962 1400285365 1904797942 
322842082 828530767 832633821 1463179852 
316824712 1073185695 1260973671 1815859901 
318153057 1194314738 1267248590 2051724831 
304555640 877819790 1213110679 2111631616 
541437335 996497972 1049077006 2063936098 
270649095 428975319 685583454 1351345223 
272112289 1334948905 1398556760 1724586126 
436476770 532236123 836045813 1023129506 
60935238 304987844 915896220 1936329094 
281725226 881140534 1901915394 2034712366 
152607844 197941363 348318738 784559590 
290145159 543436550 977764947 1681808623 
750597385 971307217 1737195272 2000755539 
462242385 1399399247 1459413496 1951894885 
537140623 1012028144 1086531968 1848682420 
992663534 1289335735 1623161625 1755699915 
943454679 1358796011 1771024152 2043046042 

**** After Reverse Operation  **** 


2043046042 1771024152 1358796011 943454679 
1755699915 1623161625 1289335735 992663534 
1848682420 1086531968 1012028144 537140623 
1951894885 1459413496 1399399247 462242385 
2000755539 1737195272 971307217 750597385 
1681808623 977764947 543436550 290145159 
784559590 348318738 197941363 152607844 
2034712366 1901915394 881140534 281725226 
1936329094 915896220 304987844 60935238 
1023129506 836045813 532236123 436476770 
1724586126 1398556760 1334948905 272112289 
1351345223 685583454 428975319 270649095 
2063936098 1049077006 996497972 541437335 
2111631616 1213110679 877819790 304555640 
2051724831 1267248590 1194314738 318153057 
1815859901 1260973671 1073185695 316824712 
1463179852 832633821 828530767 322842082 
1904797942 1400285365 681910962 388471006 
2014119113 1524325968 515204530 57716395 
889688008 589673557 195400260 6441594 
1534827968 456880399 343098142 280090412 
1912844175 1808266298 1341853635 1190959745 
2051621609 1606946231 1147722294 1070477904 
1723153177 1227619358 330111137 70982397 
1153851501 1004844897 616783871 382955828 

---------------------------------

---------------------------------

**** Before shuffling opearion ****


** first half **


2043046042 1771024152 1358796011 943454679 
1755699915 1623161625 1289335735 992663534 
1848682420 1086531968 1012028144 537140623 
1951894885 1459413496 1399399247 462242385 
2000755539 1737195272 971307217 750597385 
1681808623 977764947 543436550 290145159 
784559590 348318738 197941363 152607844 
2034712366 1901915394 881140534 281725226 
1936329094 915896220 304987844 60935238 
1023129506 836045813 532236123 436476770 
1724586126 1398556760 1334948905 272112289 
1351345223 685583454 428975319 270649095 
2063936098 1049077006 

** Second half **


996497972 541437335 2111631616 1213110679 
877819790 304555640 2051724831 1267248590 
1194314738 318153057 1815859901 1260973671 
1073185695 316824712 1463179852 832633821 
828530767 322842082 1904797942 1400285365 
681910962 388471006 2014119113 1524325968 
515204530 57716395 889688008 589673557 
195400260 6441594 1534827968 456880399 
343098142 280090412 1912844175 1808266298 
1341853635 1190959745 2051621609 1606946231 
1147722294 1070477904 1723153177 1227619358 
330111137 70982397 1153851501 1004844897 
616783871 382955828 

**** After shuffling opearion ****

2043046042 996497972 1771024152 541437335 
1358796011 2111631616 943454679 1213110679 
1755699915 877819790 1623161625 304555640 
1289335735 2051724831 992663534 1267248590 
1848682420 1194314738 1086531968 318153057 
1012028144 1815859901 537140623 1260973671 
1951894885 1073185695 1459413496 316824712 
1399399247 1463179852 462242385 832633821 
2000755539 828530767 1737195272 322842082 
971307217 1904797942 750597385 1400285365 
1681808623 681910962 977764947 388471006 
543436550 2014119113 290145159 1524325968 
784559590 515204530 348318738 57716395 
197941363 889688008 152607844 589673557 
2034712366 195400260 1901915394 6441594 
881140534 1534827968 281725226 456880399 
1936329094 343098142 915896220 280090412 
304987844 1912844175 60935238 1808266298 
1023129506 1341853635 836045813 1190959745 
532236123 2051621609 436476770 1606946231 
1724586126 1147722294 1398556760 1070477904 
1334948905 1723153177 272112289 1227619358 
1351345223 330111137 685583454 70982397 
428975319 1153851501 270649095 1004844897 
2063936098 616783871 1049077006 382955828 

---------------------------------
Program ended with exit code: 0Linked list:
It is a linear collection of data elements called ‘nodes’ each pointing to the next node. The elements are not stored at contiguous location and they are linked using pointers. Generally, there are two types of Linked lists, Single linked lists and Double linked lists.

Single Linked list:
Single Linked lists contains nodes which have two fields (Data field and address of the next node field).

 


Double Linked list:
In Double Linked list, apart from the next node address we also have the address of the previous node for every node. It essentially has 3 fields. They are Data field, previous node address field and next node address field.

 


Advantages of Linked lists:
1.	Size is dynamically expanded upon addition of every node.
2.	Nodes can be easily inserted and deleted.

Disadvantages of Linked lists:
1.	Random access is not allowed. 
2.	Extra memory space is required for the pointers. 

My Implementation of three operations:

1.	Team of Four:
I have implemented sorting algorithm first so that it can be used to sort four elements at a time. I used merge sort as that is one of the most efficient sorting algorithm for linked lists.
I have used two pointers (slow and fast pointers). Initially both the pointers are pointing to the head of the list. I moved the fast pointer three times forward and made the pointer of fourth node to null. Now, the chunk of four elements is passed to the sort method. For every iteration, the sorted list is merged with the main list. This step is performed recursively and finally a list in which every four elements are sorted is obtained.
    2.Reversing a list:
I reversed the pointers for every node starting from the head. The same process is applied till the last node is reversed.

    3.Shuffling two lists:
       First I split the list into List1 and List2 respectively. While traversing through the List1, the first node of List1 is connected to the head of first Node of List2 and first node address field of List2 is changed to address field of second node of List. The same process is continued till any of the list becomes empty.



The same logic is applied for both Single Linked lists and Double linked lists.


References:

How merge sort works?
https://www.youtube.com/watch?v=EeQ8pwjQxTM

How Linked Lists work:
https://en.wikipedia.org/wiki/Linked_list
//
//  SingleLinkedList.cpp
//  DoubleLinkedListImpl
//
//  Created by Sumanth Sai on 9/30/16.
//  Copyright © 2016 Sumanth Sai. All rights reserved.
//

#include <iostream>
#include "SingleLinkedList.h"
using namespace std;

//This Method appends data to the list
void LinkedList::append(int item){
    
    str = new SingleNode();
    str->data=item;
    
    if(start == NULL){
        start = str;
        str->link = NULL;
        tvs = str;
    }
    
    else{
        while(tvs->link != NULL){
            tvs = tvs->link;
        }
        
        tvs->link = str;
        str->link = NULL;
    }
    
}

//This Method prints the list
void LinkedList::print(SingleNode* head){
    
    SingleNode* trav = head;
    int counter =0;
    while(trav!=NULL){
        if(counter%4 == 0){
            cout<<"\n";
            
        }
        counter++;
        
        cout<<trav->data<<" ";
        trav=trav->link;
        
    }
    cout << endl;
}



//This Method reverse the list
SingleNode* LinkedList::reverse(SingleNode* head){
    
    SingleNode* prev=NULL;
    SingleNode* current= head;
    SingleNode* next =NULL;
    
    while(current !=NULL){
        next = current->link;
        current->link = prev;
        prev = current;
        current= next;
        
        
    }
    start = prev;
    
    return start;
}

void LinkedList::printlist(SingleNode* SingleNode){
    int counter =0;
    while(SingleNode!= NULL){
        if(counter%4 ==0){
            cout<<"\n";
        }
        counter++;
        
        std::cout<<SingleNode->data<<" ";
        SingleNode=SingleNode->link;
    }
    std::cout << std::endl;
}


//This Method Splits the list to two lists
void LinkedList::split(SingleNode* head,SingleNode* *front,SingleNode* *back){
    
    SingleNode* fast;
    SingleNode* slow;
    if(head == NULL || head->link == NULL){
        *front = head;
        *back = NULL;
    }
    else{
        slow = head;
        fast = head->link;
        
        while(fast !=NULL){
            fast=fast->link;
            if(fast != NULL){
                slow = slow->link;
                fast= fast->link;
            }
        }
        
        *front = head;
        
        *back= slow->link;
        slow->link = NULL;
        
    }
}

//This Method merges two lists after sorting
SingleNode* LinkedList::MergeAfterSort(SingleNode* a,SingleNode* b){
    SingleNode* result = NULL;
    
    if(a == NULL){
        return b;
    }
    else if(b == NULL){
        return a;
    }
    
    if(a->data <= b->data){
        result = a;
        result->link = MergeAfterSort(a->link, b);
    }
    else{
        result = b;
        result->link = MergeAfterSort(a, b->link);
    }
    return result;
}



//This Method sort the list
void LinkedList::sort1(SingleNode* *headref){
    SingleNode* head = *headref;
    SingleNode* a = NULL;
    SingleNode* b = NULL;
    
    //cout<<head->data<<endl;
    if((head == NULL) || (head->link == NULL)){
        return;
    }
    
    split(head, &a, &b);
    sort1(&a);
    sort1(&b);
    
    *headref = MergeAfterSort(a,b);
    
}


//This Method merges two lists
void LinkedList::merge(SingleNode* a,SingleNode* b){
    
    if(a == NULL|| b== NULL ){
        return;
    }
    
    
    while(a->link != NULL){
        a= a->link;
    }
    a->link =b;
    
}

//This Method executes the first problem statement(Team of four)
void LinkedList::teamoffoursort(SingleNode* head){
    
    SingleNode* fast;
    SingleNode* slow;
    SingleNode* slow2;
    int count=0;
    if(head == NULL){
        return;
    }
    
    slow = head;
    fast = head->link;
    if(fast == NULL){
        merge(spm,slow);
        return;
    }
    
    
    while(fast->link !=NULL && count <2){
        count +=1;
        fast=fast->link;
        
        if(fast->link != NULL){
            count +=1;
            fast= fast->link;
        }
    }
    
    if(fast != NULL){
        slow2 = fast->link;
    }
    if(fast != NULL){
        fast->link = NULL;
    }
    sort1(&slow);
    
    if((spm == NULL) || (spm->link == NULL)){
        spm = slow;
        start = slow;
    }
    else{
        merge(spm, slow);
    }
    
    
    slow = slow2;
    teamoffoursort(slow);
    
}

//This Method splits the list into half and shuffles them
void LinkedList::shuffle(SingleNode* r){
    SingleNode* p = NULL;
    SingleNode* q = NULL;
    
    split(r, &p, &q);
    cout<<"** first half **" << endl;
    printlist(p);
    cout <<"\n";
    cout <<"** second half **"<< endl;
    
    printlist(q);
    cout <<"\n";
    
    SingleNode* p_c=p, *q_c=q;
    SingleNode* p_n,*q_n;
    
    while(p_c != NULL && q_c != NULL){
        
        p_n = p_c->link;
        q_n = q_c->link;
        
        
        q_c->link = p_n;
        p_c->link = q_c;
        
        p_c =p_n;
        q_c = q_n;
        
    }
    
    
    q = q_c;
    
}

//
//  SingleLinkedList.h
//  DoubleLinkedListImpl
//
//  Created by Sumanth Sai on 9/30/16.
//  Copyright © 2016 Sumanth Sai. All rights reserved.
//

#ifndef SingleLinkedList_h
#define SingleLinkedList_h

class SingleNode{
    
public:
    int data;
    SingleNode* link;
public:
    SingleNode(){
        data =0;
        link = NULL;
        
    }
    
};

class LinkedList{
    
public:
    SingleNode* start= NULL;
    SingleNode* tvs = NULL;
    SingleNode* str = NULL;
    SingleNode* spm = NULL;
    void append(int i);
    void print(SingleNode* head);
    SingleNode* reverse(SingleNode* head);
    void split(SingleNode* head,SingleNode** front,SingleNode** back);
    SingleNode* MergeAfterSort(SingleNode* a,SingleNode* b);
    void sort1(SingleNode** headref);
    void printlist(SingleNode* SingleNode);
    void teamoffoursort(SingleNode* headref);
    void merge(SingleNode* a,SingleNode* b);
    void shuffle(SingleNode* p);
};


#endif /* SingleLinkedList_h */
//
//  main.cpp
//  Linkedlistimp
//
//  Created by Sumanth Sai on 9/20/16.
//  Copyright © 2016 Sumanth Sai. All rights reserved.
//

#include <iostream>
#include "SingleLinkedList.h"
#include "DoubleLinkedList.h"
#include <cstdlib>
using namespace std;

int main() {
    LinkedList l1,l3,l2 ;
    for(int i=1;i<=100;i=i+1){
        l1.append(i);
        
        
    }
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout<<"Execution of S1 for Single Linked list:"<<endl;
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
    
    
    //Team Of Four Exceution
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout<<"**** Before Team Of Four Operation  ****"<<endl;
    cout<<"\n";
    l1.print(l1.start);
    l1.teamoffoursort(l1.start);
    cout<<"\n";
    cout<<"**** After Team Of Four Operation ****"<<endl;
    cout<<"\n";
    l1.print(l1.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
    
    
    //Reversing the list
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout<<"**** Before Reverse Operation  ****"<<endl;
    cout<<"\n";
    l1.print(l1.start);
    l1.start=l1.reverse(l1.start);
    cout<<"\n";
    cout<<"**** After Reverse Operation  ****s"<<endl;
    cout<<"\n";
    l1.print(l1.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;
    
    cout<<"\n";
    
    for(int i=1;i<=100;i=i+1){
        l2.append(i);
        
        
    }
    //Shuffle Two lists
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout << "**** Before shuffling opearion ****\n";
    
    cout<<"\n";

   
    l1.shuffle(l2.start);
    cout << "**** After shuffling opearion ****\n";

    l1.print(l2.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
    

    
    
    for(int i=1;i<=100;i=i+1){
        l3. append(rand());
        
        
    }
    
    cout << "-----------------------------------------------------" << endl;
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout<<"Execution of S2 for Single Linked list:"<<endl;
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
  
    
    //Team Of Four Exceution
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout<<"**** Before Team Of Four Operation  ****"<<endl;
    cout<<"\n";
    l3.print(l3.start);
    l3.teamoffoursort(l3.start);
    cout<<"\n";
cout<<"**** After Team Of Four Operation ****"<<endl;
    cout<<"\n";
    l3.print(l3.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
    
    
    
    //Reversing the list
    cout << "---------------------------------" << endl;
    cout<<"\n";
   cout<<"**** Before Reverse Operation  ****"<<endl;
    cout<<"\n";
    l3.print(l3.start);
    l3.start=l3.reverse(l3.start);
    cout<<"\n";
       cout<<"**** After Reverse Operation  ****s"<<endl;
    cout<<"\n";
    l3.print(l3.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;
    
    cout<<"\n";
    //Shuffle Two lists
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout << "**** Before shuffling opearion ****\n";
    cout<<"\n";
    l3.shuffle(l3.start);
     cout << "**** After shuffling opearion ****\n";
    l3.print(l3.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;

    
    DoubleLinkedList List1,List3,List2;
    for(int i=1;i<=100;i=i+1){
        
        List1. append(&List1.start,i);
        
    }
    
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout<<"Execution of S1 for Double Linked list:"<<endl;
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
    
    
    //Team Of Four Exceution
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout<<"**** Before Team Of Four Operation  ****"<<endl;
    cout<<"\n";
    List1.printlist(List1.start);
    List1.teamoffoursort(List1.start);
    cout<<"\n";
    cout<<"**** After Team Of Four Operation ****"<<endl;
    cout<<"\n";
    List1.printlist(List1.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
    
    
    
    
    
    //Reversing the list
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout<<"**** Before Reverse Operation  ****"<<endl;
    cout<<"\n";
    List1.printlist(List1.start);
    List1.reverse(&List1.start);
    cout<<"\n";
    cout<<"**** After Reverse Operation  ****"<<endl;
    cout<<"\n";
    List1.printlist(List1.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;
    
    cout<<"\n";
    
    for(int i=1;i<=100;i=i+1){
        
        List2.append(&List2.start,i);
    }
    
    //Shuffling a List
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout << "**** Before shuffling opearion ****";
    cout<<"\n";
    
    
    List2.shuffle(List2.start);
    cout<<"\n";
    cout << "**** After shuffling opearion ****";
    cout<<"\n";
    List2.printlist(List2.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;
    
    
    int v1;
    for(int i=1;i<=100;i=i+1){
        v1 = rand();
        List3. append(&List3.start,v1);
        
        
    }
    
    cout<<"\n";
    cout << "-----------------------------------------------------" << endl;
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout<<"Execution of S2 for Double Linked list:"<<endl;
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
    
    
    //Team Of Four Exceution
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout<<"**** Before Team Of Four Operation  ****"<<endl;
    cout<<"\n";
    List3.printlist(List3.start);
    List3.teamoffoursort(List3.start);
    cout<<"\n";
    cout<<"**** After Team Of Four Operation ****"<<endl;
    cout<<"\n";
    List3.printlist(List3.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
    
    
    
    //Reversing the list
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout<<"**** Before Reverse Operation  **** "<<endl;
    cout<<"\n";
    List3.printlist(List3.start);
    List3.reverse(&List3.start);
    cout<<"\n";
    cout<<"**** After Reverse Operation  **** "<<endl;
    cout<<"\n";
    List3.printlist(List3.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;
    
    //Shuffling a list
    cout<<"\n";
    cout << "---------------------------------" << endl;
    cout<<"\n";
    cout << "**** Before shuffling opearion ****"<<endl;
    cout<<"\n";
    
    
    List3.shuffle(List3.start);
    cout<<"\n";
    cout << "**** After shuffling opearion ****\n";
    List3.printlist(List3.start);
    cout<<"\n";
    cout << "---------------------------------" << endl;
    
    
        return 0;
}
